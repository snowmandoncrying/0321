인터페이스는 상속의 개념과 비슷함.
자식이 완성을 시켜야한다.
사실 상속이 없음.
자식은 인터페이스의 모든 메서드를 오버라이드 해야 함.
자식객체가 뭘 갖고 있는지는 인터페이스에게는 중요하지 않음.

그래서 인터페이스는 자식이 뭘 갖고있는지 알 필요가 없음. 왜냐하면 필요한건 다 정의해놨기 때문임.
내가 다 갖고 있기 때문임.

인터페이스가 필요한것만 다 적어 놓으면(추상메서드) 이걸 구현하는 객체들은 다 오버라이드 해야함. (재정의)

인터페이스가 만드는 모든 것은 상수 - 공통으로 쓸 것이니까.

인터페이스만 보고 개발하기 때문에 개발코드가 바뀔 일이 없다. 인터페이스를 쓰는 이유.
상수 - 생성할 때 선언.

추상 메서드만 사용할 수 있음.

인터페이스란 개발 코드에서 객체로 직접 가는 게 아니라 한번 거쳐서 가는데 이 거치는 곳을 인터페이스라고 한다. 객체에 직접 들어가는게 아니다.
인터페이스를 보고 개발코드를 짜면 된다. 인터페이스에 필요한건 다 정의되어있기 때문이다.
인터페이스는 개발 코드가 객체에 종속되지 않게 하는 역할을 한다. 즉 객체를 교체할 수 있도록 하는 것이다.
필요한건 구현하는 객체가 가져다 쓰면 되기에 개발 코드 변경 없이 실행 내용이 다양해진다. (다형성)
인터페이스가 바뀌지 않으면 개발코드도 바뀌지 않는다. 주어진 인터페이스를 가지고 개발 코드를 짜는 것이기 때문이다.

인터페이스의 선언
인터페이스 이름을 설정해주면 되는데 이는 자바 식별자 작성 규칙에 따라 작성하면 된다.
인터페이스 선언은 클래스와 동일하다.

인터페이스의 구성멤버에는 상수, 추상메소드, 디폴트 메소드, 정적 메소드가 있다.
클래스와 달리 필드가 들어올 수 없다. 
추상 메서드의 public abstract 를 생략해도 컴파일러가 컴파일할 때 알아서 자동으로 붙여서 기능하게 해준다.
상수에도 static final 이 생략되어도 컴파일러가 컴파일할 때 알아서 자동으로 붙여서 기능하게 해준다.

인터페이스는 상수 필드만 선언 가능
인터페이스에 선언된 필드는 모두 public static final  - 생략해도 컴파일 과정에서 자동으로 붙음.
상수명 : 대문자
선언과 동시에 초기값 지정

추상 메소드 선언
인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행됨
인터페이스 메소드 - 기본적으로 추상 메소드로 선언
public abstract를 생략하더라도 컴파일 과정에서 자동으로 붙음.
추상메소드 - 메소드 선언부, 호출 방법만 기술
재정의된 메소드 - 실제 실행 메소드

디폴트 메소드 선언 
구현부가 존재 - 실행 블록을 가지고 있음
default 키워드를 반드시 붙여야 함.
기본적으로 public 접근 제한 - 생략하더라도 컴파일 과정에서 자동으로 붙음.

정적 메소드 선언
구현부가 존재 - 실행 블록을 가지고 있음
디폴트 메서드와 정적 메소드에는 구현부가 존재한다. (코드블럭)

인터페이스 구현
인터페이스의 추상 메소드에 대한 실체 메소드를 가진 객체가 구현객체이고
구현 객체를 생성하는 클래스가 구현 클래스이다.

구현 클래스 선언
자신의 객체가 인터페이스 타입으로 사용할 수 있음, implements 키워드로 명시
public class  구현클래스명 implements 인터페이스명 {
}
추상메소드의 실체 메소드 작성하는 방법
메소드의 선언부가 정확히 일치해야함

인터페이스 구현
익명 구현 객체 - 이름 없이 오버라이드 하겠다.
명시적인 구현 클래스 작성을 생략하고 바로 구현 객체를 얻는 방법이다.
이름 없는 구현 클래스 선언과 동시에 객체가 생성된다.
추상 메소드들은 모두 재정의하는 실체 메소드가 있어야함
추가적으로 필드와 메소드 선언이 가능하지만 익명 객체 안에서만 사용해야함
인터페이스 변수로 접근 불가함
다중 인터페이스 구현 클래스 가능

인터페이스의 사용
인터페이스에 구현 객체를 대입하는 방법
인터페이스는 비유하자면 사용설명서와 같다. 구현 객체들에게 호출하는 방법을 알려주는 것이다. 구현 객체는 실제로 동작하는 애들이다.
어떤 객체가 대입되어도 인터페이스는 바뀌지 않는다.
즉 인터페이스가 바뀌지 않는 이상 개발코드를 바꿀 일은 없는 것이다.
추상 메소드 사용 - 개발코드는 인터페이스를 보고 개발한다. 인터페이스는 추상메소드를 호출하고 구현 객체들이 실제 동작을 구현한다.
구현 객체에 누가 대입되든 문제가 되지 않는다.
디폴트 메소드 사용 - 인터페이스만으로는 사용이 불가하다. 

