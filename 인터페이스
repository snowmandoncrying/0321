인터페이스란 개발 코드에서 객체로 직접 가는 게 아니라 한번 거쳐서 가는데 이 거치는 곳을 인터페이스라고 한다. 객체에 직접 들어가는게 아니다.
인터페이스를 보고 개발코드를 짜면 된다. 인터페이스에 필요한건 다 정의되어있기 때문이다.
인터페이스는 개발 코드가 객체에 종속되지 않게 하는 역할을 한다. 즉 객체를 교체할 수 있도록 하는 것이다.
필요한건 구현하는 객체가 가져다 쓰면 되기에 개발 코드 변경 없이 실행 내용이 다양해진다. (다형성)
인터페이스가 바뀌지 않으면 개발코드도 바뀌지 않는다. 주어진 인터페이스를 가지고 개발 코드를 짜는 것이기 때문이다.

인터페이스의 선언
인터페이스 이름을 설정해주면 되는데 이는 자바 식별자 작성 규칙에 따라 작성하면 된다.
인터페이스 선언은 클래스와 동일하다.

인터페이스의 구성멤버에는 상수, 추상메소드, 디폴트 메소드, 정적 메소드가 있다.
클래스와 달리 필드가 들어올 수 없다. 
추상 메서드의 public abstract 를 생략해도 컴파일러가 컴파일할 때 알아서 자동으로 붙여서 기능하게 해준다.
상수에도 static final 이 생략되어도 컴파일러가 컴파일할 때 알아서 자동으로 붙여서 기능하게 해준다.

인터페이스는 상수 필드만 선언 가능하다.
		

디폴트 메서드와 정적 메소드에는 구현부가 존재한다. (코드블럭)

- 상속의 개념과 비슷함.
자식이 완성을 시켜야한다.
사실 상속이 없음.
자식은 인터페이스의 모든 메서드를 오버라이드 해야 함.
자식객체가 뭘 갖고 있는지는 인터페이스에게는 중요하지 않음.

그래서 인터페이스는 자식이 뭘 갖고있는지 알 필요가 없음. 왜냐하면 필요한건 다 정의해놨기 때문임.
내가 다 갖고 있기 때문임.

인터페이스가 필요한것만 다 적어 놓으면(추상메서드) 이걸 구현하는 객체들은 다 오버라이드 해야함. (재정의)

인터페이스가 만드는 모든 것은 상수 - 공통으로 쓸 것이니까.

인터페이스만 보고 개발하기 때문에 개발코드가 바뀔 일이 없다. 인터페이스를 쓰는 이유.
상수 - 생성할 때 선언.

추상 메서드만 사용할 수 있음.
