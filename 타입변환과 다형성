타입변환과 다형성
다형성이란 하나의 타입에 여러 가지 객체를 대입해 다양한 실행 결과를 얻는 것이다.
다형성을 구현하는 기술에는 상속 또는 인터페이스의 자동 타입 변환인 promotion과 오버라이딩 overriding이 있다.
다양한 실행 결과를 얻을 수 있고 객체를 부품화시킬 수 있어 유지 보수에 용이하다. (메소드의 매개변수로 사용함)

자동 타입 변환 (Promotion)
인터페이스 변수 = 구현객체; (자동으로)
인터페이스 배열로 구현한 객체 관리
tires[1] = new KumhoTire();
void run() {
  for(Tire tire : tires) {
    tire.roll();
  }
}
매개변수의 다형성 - 매개변수의 타입이 인터페이스인 경우 : 어떤 구현 객체도 매개값으로 사용 가능하다 , 구현 객체에 따라 메소드 실행결과가 달라짐
강제 타입 변환(Casting) - 인터페이스 타입으로 자동 변환 후, 구현 클래스 타입으로 변환/ 필요성 - 구현 클래스 타입에 선언된 다른 멤버를 사용하기 위해서
객체 타입 확인(instanceof 연산자) - 강제 타입 변환 전 구현 클래스 타입 조사

인터페이스 상속
인터페이스간 상속이 가능하다. (다중상속 가능)
public interface 하위 인터페이스 extends 상위 인터페이스1, 상위 인터페이스2 {
    // 실행문
}
하위 인터페이스 구현 클래스는 추상 메소드를 모두 재정의 해야함. 
인터페이스 자동 타입 변환 - 구현객체는 당연히 부모에 대입 가능하다. (상속받은거니까) 근데 해당 타입의 인터페이스에 선언된 메소드만 호출 가능함. 
부모는 자식을 담을 수 있으나 자식 것을 사용할 수는 없다. 그리고 인터페이스에서 부모는 자식을 알 필요도 없다. 그냥 정의만 해놓으면 되기 때문이다.

디폴트 메소드와 인터페이스 확장
객체 구현을 다 끝냈는데 나중에 새로운 구현 클래스가 추가되는 상황이 있다. 이때 기존 구현 클래스는 그대로 사용하면 된다.
그런데 새로운 구현 클래스는 디폴트 메소드를 활용해야 한다. 그냥 추상 메소드를 추가하면 컴파일 에러가 뜬다. 그럼 그냥 디폴트 메서드를 상속해서 오버라이드 해주면 된다.
디폴트 메서드 오버라이드 하는 방법은 기존 방식과 동일하다. 그냥 default를 빼주면 된다. 디폴트 메소드를 추상 메소드로 재선언 해주는 것이다.
또는 상속 먼저 시켜놓고 나중에 오버라이드 하는 방법도 있다.
