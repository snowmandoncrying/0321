타입변환과 다형성
다형성이란 하나의 타입에 여러 가지 객체를 대입해 다양한 실행 결과를 얻는 것이다.
다형성을 구현하는 기술에는 상속 또는 인터페이스의 자동 타입 변환인 promotion과 오버라이딩 overriding이 있다.
다양한 실행 결과를 얻을 수 있고 객체를 부품화시킬 수 있어 유지 보수에 용이하다. (메소드의 매개변수로 사용함)

자동 타입 변환 (Promotion)
인터페이스 변수 = 구현객체; (자동으로)
인터페이스 배열로 구현한 객체 관리
tires[1] = new KumhoTire();
void run() {
  for(Tire tire : tires) {
    tire.roll();
  }
}
매개변수의 다형성 - 매개변수의 타입이 인터페이스인 경우 : 어떤 구현 객체도 매개값으로 사용 가능하다 , 구현 객체에 따라 메소드 실행결과가 달라짐
강제 타입 변환(Casting) - 인터페이스 타입으로 자동 변환 후, 구현 클래스 타입으로 변환/ 필요성 - 구현 클래스 타입에 선언된 다른 멤버를 사용하기 위해서
객체 타입 확인(instanceof 연산자) - 강제 타입 변환 전 구현 클래스 타입 조사

인터페이스 상속
인터페이스간 상속이 가능하다. (다중상속 가능)
public interface 하위 인터페이스 extends 상위 인터페이스1, 상위 인터페이스2 {
    // 실행문
}
하위 인터페이스 구현 클래스는 추상 메소드를 모두 재정의 해야함. 
